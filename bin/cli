#!/usr/bin/env node

const fs = require('fs-extra')
const os = require('os')
const path = require('path')

const { exec } = require('../lib/exec')
const { runUpgrade } = require('../lib/upgradeToV13')

const currentDirectory = process.cwd()
const kitRoot = path.join(__dirname, '..')

const additionalOptions = [].concat(...process.argv).splice(2)
const command = additionalOptions.shift()

const npmrc = `
audit=false
script-shell=bash
`

const gitignore = `
# Node.js ignores
node_modules/

# Prototype ignores - per-user
.env
public/

# General ignores
.DS_Store
.idea
`

const packageJson = {
  scripts: {
    start: 'govuk-prototype-kit start'
  }
}

const packageJsonFormat = { encoding: 'utf8', EOL: os.EOL, spaces: 2 }

function usage () {
  const prog = 'npx govuk-prototype-kit'
  console.log(`
${prog} <command>

Usage:

${prog} create
${prog} create /exact/location/to/create/in
${prog} create relative/location/to/create/in
${prog}
${prog} start`
  )
}

const getInstallLocation = () => {
  const lastOption = ('' + additionalOptions[additionalOptions.length - 2]).startsWith('-') ? undefined : additionalOptions[additionalOptions.length - 1]
  if (lastOption) {
    if (lastOption.startsWith('/')) {
      return lastOption
    }
    return path.join(currentDirectory, lastOption)
  }
  return currentDirectory
}

const getChosenKitDependency = () => {
  const defaultValue = 'govuk-prototype-kit'
  let versionFlagIndex = additionalOptions.indexOf('--version')
  if (versionFlagIndex === -1) {
    versionFlagIndex = additionalOptions.indexOf('-v')
  }
  if (versionFlagIndex === -1) {
    return defaultValue
  }

  const versionRequested = additionalOptions[versionFlagIndex + 1]

  if (versionRequested === 'local') {
    return kitRoot
  } else if (versionRequested) {
    if (versionRequested.match(/\d+\.\d+\.\d+/) ||
      versionRequested.match(/\d+\.\d+\.\d+-alpha\.\d+]/) ||
      versionRequested.match(/\d+\.\d+\.\d+-beta\.\d+]/)
    ) {
      return `${defaultValue}@${versionRequested}`
    } else {
      return versionRequested
    }
  }
  return defaultValue
};

(async () => {
  if (command === 'create') {
    const installDirectory = getInstallLocation()
    const kitDependency = getChosenKitDependency()

    await fs.ensureDir(installDirectory)
    if ((await fs.readdir(installDirectory)).length > 0) {
      console.error(`Directory ${installDirectory} is not empty, please specify an empty location.`)
      process.exit(3)
    }

    await fs.writeJson(path.join(installDirectory, 'package.json'), {}, packageJsonFormat)

    console.log('Creating your prototype')
    const dots = setInterval(() => {
      process.stdout.write('.')
    }, 500)
    await exec(`npm install ${kitDependency} govuk-frontend`, {
      stdio: 'inherit',
      cwd: installDirectory
    }, console.log)
    clearInterval(dots)

    const copyFile = (fileName) => fs.copy(path.join(kitRoot, fileName), path.join(installDirectory, fileName))
    const updatePackageJson = async (packageJsonPath) => {
      let newPackageJson = Object.assign({}, packageJson)
      newPackageJson = Object.assign(newPackageJson, await fs.readJson(packageJsonPath))
      await fs.writeJson(packageJsonPath, newPackageJson, packageJsonFormat)
    }

    await Promise.all([
      fs.copy(path.join(kitRoot, 'prototype-starter'), installDirectory),
      fs.writeFile(path.join(installDirectory, '.gitignore'), gitignore, 'utf8'),
      fs.writeFile(path.join(installDirectory, '.npmrc'), npmrc, 'utf8'),
      copyFile('LICENCE.txt'),
      updatePackageJson(path.join(installDirectory, 'package.json'))
    ])
  } else if (command === 'start') {
    require('../start')
  } else if (command === 'upgrade') {
    await runUpgrade()
  } else {
    usage()
    process.exitCode = 2
  }
})()
